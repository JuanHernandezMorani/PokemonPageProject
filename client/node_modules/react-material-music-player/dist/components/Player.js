"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Player;

var _SwipeableDrawer2 = _interopRequireDefault(require("@mui/material/SwipeableDrawer"));

var _Box2 = _interopRequireDefault(require("@mui/material/Box"));

var _Paper2 = _interopRequireDefault(require("@mui/material/Paper"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@mui/material/styles");

var _CoverArt = _interopRequireDefault(require("./CoverArt.js"));

var _TrackDetials = _interopRequireDefault(require("./TrackDetials.js"));

var _ProgressBar = _interopRequireDefault(require("./ProgressBar.js"));

var _Controls = _interopRequireDefault(require("./Controls.js"));

var _VolumeControl = _interopRequireDefault(require("./VolumeControl.js"));

var _PlaylistControl = _interopRequireDefault(require("./Playlist/PlaylistControl.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PREFIX = "Player";
var RootPaper = (0, _styles.styled)(_Paper2.default)(function (_ref) {
  var theme = _ref.theme;
  return {
    width: "100vw",
    // positioning
    position: "fixed",
    bottom: 0,
    // prevent screen size overflow by making padding part of dimensions
    boxSizing: "border-box",
    borderRadius: "".concat(theme.shape.borderRadius, " ").concat(theme.shape.borderRadius, " 0 0"),
    // only pad left and right; top padding too much
    paddingRight: theme.spacing(1),
    paddingLeft: theme.spacing(1),
    // incase of overflow in undocked mode
    overflow: "hidden",
    transition: theme.transitions.create(["all"])
  };
});
var SwipeableDrawerRoot = (0, _styles.styled)(_Box2.default)(function (_ref2) {
  var theme = _ref2.theme;
  return _defineProperty({
    // fixed size root for swipeable
    // width including padding
    // boxSizing: "border-box",
    height: "80vh",
    marginTop: theme.spacing(6),
    padding: theme.spacing(1),
    overflow: "hidden"
  }, "& > .".concat(PREFIX, "-swipeable-puller"), {
    width: 30,
    height: theme.spacing(1),
    backgroundColor: theme.palette.action.disabled,
    // button color
    borderRadius: 3,
    // position
    position: "absolute",
    top: theme.spacing(3),
    // center in parent border
    left: "calc(50% - 15px)" // center horizontally

  });
});
var RowBox = (0, _styles.styled)(_Box2.default)(function () {
  return {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "nowrap"
  };
});
var ColumnBox = (0, _styles.styled)(_Box2.default)(function () {
  return {
    // fill swipeable drawer root
    width: "100%",
    height: "100%",
    // flexbox
    display: "flex",
    flexDirection: "column",
    justifyContent: "end",
    alignItems: "stretch",
    flexWrap: "nowrap"
  };
}); // box center child

var CenterChildBox = (0, _styles.styled)(_Box2.default)(function () {
  return {
    // flexbox
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    flexWrap: "nowrap"
  };
}); //create your forceUpdate hook

function useForceUpdate() {
  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      setValue = _useState2[1]; // integer state


  return function () {
    return setValue(function (value) {
      return value + 1;
    });
  }; // update the state to force render
}

function Player(props) {
  var sx = props.sx;
  var disableDrawer = props.disableDrawer;
  var theme = (0, _styles.useTheme)();

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      maximised = _useState4[0],
      setMaximised = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isLarge = _useState6[0],
      setLarge = _useState6[1];

  var forceUpdate = useForceUpdate();

  var _useSelector = (0, _reactRedux.useSelector)(
  /** @type {import("../redux/types.js").useSelectCb} */
  function (_ref4) {
    var currentTrack = _ref4.currentTrack,
        playlist = _ref4.playlist;
    return {
      currentTrack: currentTrack,
      playlist: playlist
    };
  }, _reactRedux.shallowEqual),
      currentTrack = _useSelector.currentTrack,
      playlist = _useSelector.playlist;

  var openSwipeableDrawer = function openSwipeableDrawer() {
    // only maximise if docked and not large
    if (!disableDrawer && !isLarge) {
      setMaximised(true);
    }
  };

  var closeSwipeableDrawer = function closeSwipeableDrawer() {
    // only close if its maximised
    if (maximised) {
      setMaximised(false);
    }
  };

  var rowView = function rowView() {
    return /*#__PURE__*/_react.default.createElement(RowBox, {
      onClick: openSwipeableDrawer
    }, /*#__PURE__*/_react.default.createElement(_CoverArt.default, {
      src: playlist[currentTrack].coverArt,
      sx: {
        height: "48px",
        width: "48px",
        flexShrink: 0
      }
    }), /*#__PURE__*/_react.default.createElement(_TrackDetials.default, {
      sx: {
        // fixed size to stop resize on content change
        width: "120px",
        // grow if screen is small to cover extra space
        flexGrow: isLarge ? 0 : 1,
        textAlign: "left",
        margin: 1,
        flexShrink: 0
      }
    }), /*#__PURE__*/_react.default.createElement(_Controls.default, {
      size: isLarge ? "large" : "small"
    }), isLarge ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      sx: {
        flexGrow: 6
      }
    }), /*#__PURE__*/_react.default.createElement(_VolumeControl.default, {
      sx: {
        flexGrow: 2
      }
    }), /*#__PURE__*/_react.default.createElement(_PlaylistControl.default, {
      playlistViewMode: "popover"
    })) : null);
  };

  var columnView = function columnView() {
    return /*#__PURE__*/_react.default.createElement(ColumnBox, null, /*#__PURE__*/_react.default.createElement(CenterChildBox, {
      sx: {
        flexGrow: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_CoverArt.default, {
      className: "children",
      src: playlist[currentTrack].coverArt,
      sx: {
        height: "300px",
        width: "300px",
        boxShadow: 4
      }
    }), /*#__PURE__*/_react.default.createElement(_TrackDetials.default, {
      sx: {
        mt: 1,
        textAlign: "center"
      }
    })), /*#__PURE__*/_react.default.createElement(_ProgressBar.default, null), /*#__PURE__*/_react.default.createElement(_Controls.default, null), /*#__PURE__*/_react.default.createElement(_VolumeControl.default, null), /*#__PURE__*/_react.default.createElement(_PlaylistControl.default, {
      playlistViewMode: "expand"
    }));
  }; // set large depending on player width


  var rootRef = _react.default.useRef(); // eslint-disable-next-line


  (0, _react.useEffect)(function () {
    /**
     * Root of the player
     * @type {Element}
     * */
    var rootElement = rootRef.current;

    if (rootElement.clientWidth > theme.breakpoints.values.md) {
      if (!isLarge) setLarge(true);
    } else {
      if (isLarge) {
        setLarge(false); // incase maximised before resize

        if (maximised) setMaximised(false);
      }
    }
  }); // also set window resize listener

  (0, _react.useEffect)(function () {
    window.onresize = function () {
      forceUpdate();
    }; // eslint-disable-next-line

  }, []);
  return (
    /*#__PURE__*/
    // sx from props can be used to override default styles in rowView
    _react.default.createElement(RootPaper, {
      ref: rootRef,
      sx: sx,
      elevation: 4
    }, maximised ? null : rowView(), !disableDrawer && !isLarge && /*#__PURE__*/_react.default.createElement(_SwipeableDrawer2.default, {
      open: maximised,
      anchor: "bottom",
      onClose: closeSwipeableDrawer,
      onOpen: openSwipeableDrawer
    }, /*#__PURE__*/_react.default.createElement(SwipeableDrawerRoot, null, /*#__PURE__*/_react.default.createElement(_Box2.default, {
      className: "".concat(PREFIX, "-swipeable-puller"),
      onClick: closeSwipeableDrawer
    }), columnView())))
  );
}