"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eventHandler;

var _types = require("../types");

var _actionCreators = _interopRequireDefault(require("../actionCreators.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function eventHandler(store) {
  var clearPlaylist = function clearPlaylist() {
    store.dispatch(_actionCreators.default.stop()); // make sure not referencing empty index after playlist update

    store.dispatch(_actionCreators.default.changeTrack(0));
    store.dispatch(_actionCreators.default.updatePlaylist([new _types.Track("", "", "", "", "")]));
  };

  window.addEventListener(_types.CustomNativeEventTypes.PLAY, function (e) {
    var playlist =
    /**@type {CustomEvent}*/
    e.detail;

    if (!playlist) {
      store.dispatch(_actionCreators.default.play());
      return;
    } else if (playlist.length >= 1) {
      clearPlaylist();
      store.dispatch(_actionCreators.default.updatePlaylist(playlist));
      store.dispatch(_actionCreators.default.play());
    }
  });
  window.addEventListener(_types.CustomNativeEventTypes.PAUSE, function (e) {
    store.dispatch(_actionCreators.default.pause());
  });
  window.addEventListener(_types.CustomNativeEventTypes.STOP, function (e) {
    store.dispatch(_actionCreators.default.stop());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_VOLUME, function (e) {
    var level =
    /** @type {CustomEvent} */
    e.detail; //typescript cast Event to CustomEvent

    if (level >= 0 || level <= 100) store.dispatch(_actionCreators.default.setVolume(level));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SKIP_NEXT, function (e) {
    store.dispatch(_actionCreators.default.skipNext());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SKIP_PREV, function (e) {
    store.dispatch(_actionCreators.default.skipPrev());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SHUFFLE, function (e) {
    var bool =
    /** @type {CustomEvent} */
    e.detail; //typescript cast Event to CustomEvent

    store.dispatch(_actionCreators.default.shuffle(bool));
  });
  window.addEventListener(_types.CustomNativeEventTypes.CHANGE_TRACK, function (e) {
    var index =
    /**@type {CustomEvent}*/
    e.detail;
    store.dispatch(_actionCreators.default.changeTrack(index));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_PLAYLIST, function (e) {
    var playlist =
    /**@type {CustomEvent}*/
    e.detail;
    if (playlist < 1) clearPlaylist();else store.dispatch(_actionCreators.default.updatePlaylist(playlist));
  });
  window.addEventListener(_types.CustomNativeEventTypes.CLEAR_PLAYLIST, function (e) {
    clearPlaylist();
  });
  window.addEventListener(_types.CustomNativeEventTypes.SEEK, function (e) {
    var progress =
    /**@type {CustomEvent}*/
    e.detail;
    if (progress > 100 || progress < 0) return;
    store.dispatch(_actionCreators.default.seek(progress));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_REPEAT_MODE, function (e) {
    store.dispatch(_actionCreators.default.setRepeatMode(
    /**@type {CustomEvent}*/
    e.detail));
  });

  var playNextOrLaterHandler = function playNextOrLaterHandler(e) {
    var currentPlaylist = store.getState().playlist;
    var currentTrack = store.getState().currentTrack;
    var newPlaylist = [];
    if (e.type === _types.CustomNativeEventTypes.PLAY_NEXT) newPlaylist = currentPlaylist.reduce(function (accumulator, currentValue, index) {
      if (index === currentTrack) return [].concat(_toConsumableArray(accumulator), [currentValue], _toConsumableArray(e.detail));else return [].concat(_toConsumableArray(accumulator), [currentValue]);
    }, []);else if (e.type === _types.CustomNativeEventTypes.PLAY_LATER) {
      newPlaylist = currentPlaylist.concat(e.detail);
    }
    store.dispatch(_actionCreators.default.updatePlaylist(newPlaylist));
  };

  window.addEventListener(_types.CustomNativeEventTypes.PLAY_NEXT, playNextOrLaterHandler);
  window.addEventListener(_types.CustomNativeEventTypes.PLAY_LATER, playNextOrLaterHandler);
  return function (next) {
    return function (action) {
      return next(action);
    };
  };
}