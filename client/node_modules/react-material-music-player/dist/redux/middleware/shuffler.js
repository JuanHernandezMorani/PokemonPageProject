"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _types = require("../types");

var _actionCreators = _interopRequireDefault(require("../actionCreators.js"));

var _shuffle = _interopRequireDefault(require("../../utils/shuffle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var shuffler = function shuffler(store) {
  return function (next) {
    return function (action) {
      var state = store.getState();

      if (action.type === _types.ActionTypes.SHUFFLE && state.shuffled !== action.payload.shuffle) {
        var playlist = state.playlist;
        var currentIndex = state.currentTrack;
        var currentTrack = playlist[state.currentTrack]; // current track

        var upper = playlist.slice(0, currentIndex);
        var lower = playlist.slice(currentIndex + 1, playlist.lenth);
        var withoutCurrent = upper.concat(lower);
        withoutCurrent = action.payload.shuffle ? (0, _shuffle.default)(withoutCurrent) : withoutCurrent.sort(function (first, second) {
          return first.ID < second.ID;
        }); // update playlist with current track on top

        store.dispatch(_actionCreators.default.updatePlaylist([currentTrack].concat(_toConsumableArray(withoutCurrent))));
        store.dispatch(_actionCreators.default.changeTrack(0));
      }

      return next(action);
    };
  };
};

var _default = shuffler;
exports.default = _default;