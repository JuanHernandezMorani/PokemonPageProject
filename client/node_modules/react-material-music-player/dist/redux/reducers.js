"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _types = require("./types");

function mediaState() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _types.MediaState.STOPPED;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _types.ActionTypes.PLAY:
      return _types.MediaState.PLAYING;

    case _types.ActionTypes.PAUSE:
      return _types.MediaState.PAUSED;

    case _types.ActionTypes.STOP:
      return _types.MediaState.STOPPED;

    default:
      return state;
  }
}

function playlist() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new _types.Track("", "", "", "", "")];
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.UPDATE_PLAYLIST) return action.payload.playlist;else return state;
}

function currentTrack() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.CHANGE_TRACK) return action.payload.index;else return state;
}

function shuffled() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SHUFFLE) return action.payload.shuffle;else return state;
}

function currentTime() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_CURRENT_TIME) return action.payload.currentTime;else return state;
}

function timeLeft() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_TIME_LEFT) return action.payload.timeLeft;else return state;
}

function volume() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.CHANGE_VOLUME) return action.payload.volume;else return state;
}

function repeatMode() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _types.RepeatMode.NORMAL;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_REPEAT_MODE) return action.payload.mode;else return state;
}

var _default = (0, _redux.combineReducers)({
  mediaState: mediaState,
  playlist: playlist,
  currentTrack: currentTrack,
  shuffled: shuffled,
  currentTime: currentTime,
  timeLeft: timeLeft,
  volume: volume,
  repeatMode: repeatMode
});

exports.default = _default;