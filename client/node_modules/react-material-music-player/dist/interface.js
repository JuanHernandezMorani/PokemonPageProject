"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _types = require("./redux/types");

/**  @typedef {import("./redux/types").Track} Track */

/**
 * This sets new playlist and starts playing
 * @param {?Track[]} playlist - Array of Tracks to play
 */
function play(playlist) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.PLAY, {
    detail: playlist
  });
  window.dispatchEvent(event);
}
/**
 * This pauses the current track
 */


function pause() {
  var event = new CustomEvent(_types.CustomNativeEventTypes.PAUSE);
  window.dispatchEvent(event);
}
/**
 * This stops the audio player element
 */


function stop() {
  var event = new CustomEvent(_types.CustomNativeEventTypes.STOP);
  window.dispatchEvent(event);
}
/**
 * This changes volume level
 * @param {number} level - Number from 0 to 100
 */


function setVolume(level) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SET_VOLUME, {
    detail: level
  });
  window.dispatchEvent(event);
}
/**
 * This skips to next track in playlist
 */


function skipNext() {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SKIP_NEXT);
  window.dispatchEvent(event);
}
/**
 * This skips to previous track in playlist
 */


function skipPrev() {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SKIP_PREV);
  window.dispatchEvent(event);
}
/**
 * This shuffles playlist
 * @param {boolean} bool - true|false
 */


function shuffle(bool) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SHUFFLE, {
    detail: bool
  });
  window.dispatchEvent(event);
}
/**
 * This seeks through current track
 * @param {number} progress - Number 0 to 100 as percentage of total track time
 */


function seek(progress) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SEEK, {
    detail: progress
  });
  window.dispatchEvent(event);
}
/**  @typedef {import("./redux/types").RepeatMode} RepeatMode */

/**
 * This sets repeat mode
 * @param {RepeatMode} mode - One of three strings "NORMAL"|"REPEAT_ALL"|"REPEAT_ONE".
 */


function setRepeatMode(mode) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SET_REPEAT_MODE, {
    detail: mode
  });
  window.dispatchEvent(event);
}
/**
 * This changes track to specified index
 * @param {number} index - Index of track to jump to.
 */


function changeTrack(index) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.CHANGE_TRACK, {
    detail: index
  });
  window.dispatchEvent(event);
}
/**
 * This inserts playlist right after current playing track
 * @param {Track[]} playlist - Array of Tracks to insert
 */


function playNext(playlist) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.PLAY_NEXT, {
    detail: playlist
  });
  window.dispatchEvent(event);
}
/**
 * This appends playlist to the end of current playlist
 * @param {Track[]} playlist - Array of Tracks to append
 */


function playLater(playlist) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.PLAY_LATER, {
    detail: playlist
  });
  window.dispatchEvent(event);
}
/**
 * This sets new playlist
 * @param {Track[]} playlist - Array of Tracks to set
 */


function setPlaylist(playlist) {
  var event = new CustomEvent(_types.CustomNativeEventTypes.SET_PLAYLIST, {
    detail: playlist
  });
  window.dispatchEvent(event);
}
/**
 * This clears all tracks
 */


function clearPlaylist() {
  var event = new CustomEvent(_types.CustomNativeEventTypes.CLEAR_PLAYLIST);
  window.dispatchEvent(event);
}

var interfaceObject = {
  play: play,
  pause: pause,
  stop: stop,
  setVolume: setVolume,
  skipNext: skipNext,
  skipPrev: skipPrev,
  shuffle: shuffle,
  seek: seek,
  setRepeatMode: setRepeatMode,
  changeTrack: changeTrack,
  playNext: playNext,
  playLater: playLater,
  setPlaylist: setPlaylist,
  clearPlaylist: clearPlaylist
};
var _default = interfaceObject;
exports.default = _default;